# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: BuildJob
    displayName: 'Build and Package Application'
    steps:
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Default Subscription (0f21e802-aeff-4e83-977e-a5bde15f65c1)'
        KeyVaultName: 'agentic7441751515'
        SecretsFilter: '*'
        RunAsPreJob: true
    - script: echo Building the application...
      displayName: 'Start Build Process'

    - script: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        echo Creating .env file...
        echo "OPENAI_API_KEY= $(openai-api-key)" > .env
        echo "BING_KEY= $(bing-key)" >> .env
        echo "BING_ENDPOINT= $(bing-endpoint)" >> .env
        echo "AZURE_SEARCH_API_KEY= $(ai-search-key)" >> .env
        echo "AZURE_SEARCH_SERVICE_ENDPOINT= $(ai-search-endpoint)" >> .env
        echo "AZURE_SEARCH_INDEX= $(ai-search-index)" >> .env
        echo "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG= $(ai-search-semantic-config)" >> .env
        echo "AZURE_OPENAI_API_KEY= $(az-openai-key)" >> .env
        echo "AZURE_OPENAI_ENDPOINT= $(az-openai-endpoint)" >> .env
      displayName: 'Generate .env File'
      env:
        OPENAI_API_KEY: $(openai-api-key)
        BING_KEY: $(bing-key)
        BING_ENDPOINT: $(bing-endpoint)
        AZURE_SEARCH_API_KEY: $(ai-search-key)
        AZURE_SEARCH_SERVICE_ENDPOINT: $(ai-search-endpoint)
        AZURE_SEARCH_INDEX: $(ai-search-index)
        AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG: $(ai-search-semantic-config)
        AZURE_OPENAI_API_KEY: $(az-openai-key)
        AZURE_OPENAI_ENDPOINT: $(az-openai-endpoint)
      
    - script: ls -R .
      displayName: 'List Working Directory Contents'
    
    - script: |
        echo Creating deployment package...
        zip -r $(Build.ArtifactStagingDirectory)/app.zip main.py requirements.txt .env
      displayName: 'Package Application'

    - script: unzip -l $(Build.ArtifactStagingDirectory)/app.zip
      displayName: 'List Contents of Created ZIP File'

    - script: ls -R $(Build.ArtifactStagingDirectory)
      displayName: 'List Build Artifacts'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/app.zip'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: 'Deploy Application'
  dependsOn: Build
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Azure App Service'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(Pipeline.Workspace)'

    - script: ls -R $(Pipeline.Workspace)
      displayName: 'List Downloaded Artifacts'

    - script: unzip -l $(Pipeline.Workspace)/app.zip
      displayName: 'List Contents of Downloaded ZIP File'

    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Default Subscription (0f21e802-aeff-4e83-977e-a5bde15f65c1)'
        appType: 'webAppLinux'
        WebAppName: 'st-paulch'
        packageForLinux: '$(Pipeline.Workspace)/app.zip'
        RuntimeStack: 'PYTHON:3.11'
        StartupCommand: 'streamlit run main.py --server.port $PORT'
